# All-in-One Dockerfile f# Create startup script that runs both Ollama and FastAPI
RUN echo '#!/bin/bash\n\
# Set memory limits for Ollama\n\
export OLLAMA_MAX_LOADED_MODELS=1\n\
export OLLAMA_NUM_PARALLEL=1\n\
\n\
# Start Ollama in background\n\
ollama serve &\n\
OLLAMA_PID=$!\n\
\n\
# Wait for Ollama to start\n\
echo "Waiting for Ollama to start..."\n\
sleep 15\n\
\n\
# Check if Ollama is still running\n\
if kill -0 $OLLAMA_PID 2>/dev/null; then\n\
    echo "Ollama is running, pulling model..."\n\
    # Use smaller, more efficient model\n\
    ollama pull llama3.2:1b\n\
    echo "Model pulled successfully"\n\
else\n\
    echo "Ollama failed to start, continuing without it..."\n\
fi\n\
\n\
# Start FastAPI with virtual environment\n\
exec /opt/venv/bin/uvicorn web_api:app --host 0.0.0.0 --port ${PORT:-8000}\n\
' > /app/start.sh && chmod +x /app/start.shncludes both FastAPI and Ollama in one container

FROM ollama/ollama:latest

# Install Python and pip
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python requirements and install in virtual environment
COPY requirements.txt .
RUN python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install --no-cache-dir --upgrade pip && \
    /opt/venv/bin/pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create startup script that runs both Ollama and FastAPI
RUN echo '#!/bin/bash\n\
# Start Ollama in background\n\
ollama serve &\n\
\n\
# Wait for Ollama to be ready\n\
echo "Waiting for Ollama to start..."\n\
sleep 10\n\
\n\
# Pull the model\n\
ollama pull llama3.1\n\
\n\
# Start FastAPI with virtual environment\n\
exec /opt/venv/bin/uvicorn web_api:app --host 0.0.0.0 --port ${PORT:-8000}\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE $PORT

# Use the startup script
CMD ["/app/start.sh"]
